<<<<<<< HEAD
// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2421.Neptune;

=======
package org.usfirst.frc2421.Neptune;

import com.sun.squawk.debugger.Log;
>>>>>>> origin/temp-master
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
<<<<<<< HEAD
import org.usfirst.frc2421.Neptune.commands.*;
import org.usfirst.frc2421.Neptune.subsystems.*;
=======
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2421.Neptune.commands.AutonomousCommand;
import org.usfirst.frc2421.Neptune.commands.TeleopCommand;
import org.usfirst.frc2421.Neptune.subsystems.CameraSystem;
import org.usfirst.frc2421.Neptune.subsystems.DriveSystem;
import org.usfirst.frc2421.Neptune.subsystems.LoaderSystem;
import org.usfirst.frc2421.Neptune.subsystems.ShootSystem;
>>>>>>> origin/temp-master

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
<<<<<<< HEAD

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveSystem driveSystem;
    public static CameraSystem cameraSystem;
    public static ShootSystem shootSystem;
    public static ClimbSystem climbSystem;
    public static CollectionSystem collectionSystem;
    public static TipSystem tipSystem;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
=======
    Command teleopCommand;
    public static OI oi;
    public static DriveSystem driveSystem;
    public static CameraSystem cameraSystem;
    public static ShootSystem shootSystem;
    public static LoaderSystem loaderSystem;
>>>>>>> origin/temp-master

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
<<<<<<< HEAD
	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystem = new DriveSystem();
        cameraSystem = new CameraSystem();
        shootSystem = new ShootSystem();
        climbSystem = new ClimbSystem();
        collectionSystem = new CollectionSystem();
        tipSystem = new TipSystem();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
=======
        RobotMap.init();

        driveSystem = new DriveSystem();
        cameraSystem = new CameraSystem();
        shootSystem = new ShootSystem();
        loaderSystem = new LoaderSystem();

>>>>>>> origin/temp-master
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();
<<<<<<< HEAD
	
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
=======

        // instantiate the command used for the autonomous period
        autonomousCommand = new AutonomousCommand();
        teleopCommand = new TeleopCommand();
>>>>>>> origin/temp-master
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
<<<<<<< HEAD
        if (autonomousCommand != null) autonomousCommand.start();
=======
        if (teleopCommand != null) {
            teleopCommand.cancel();
        }

        if (autonomousCommand != null) {
            autonomousCommand.start();
        }
>>>>>>> origin/temp-master
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
<<<<<<< HEAD
	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
=======
        // This makes sure that the autonomous stops running when
        // teleop starts running.
        if (autonomousCommand != null) {
            autonomousCommand.cancel();
        }

        if (teleopCommand != null) {
            teleopCommand.start();
        }
>>>>>>> origin/temp-master
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
<<<<<<< HEAD
=======
        refreshSubsystemData();
        
>>>>>>> origin/temp-master
    }

    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
<<<<<<< HEAD
=======
    
    public void refreshSubsystemData(){
        shootSystem.refreshData();
        cameraSystem.refreshData();
        loaderSystem.refreshData();
        driveSystem.refreshData();
    }
>>>>>>> origin/temp-master
}
