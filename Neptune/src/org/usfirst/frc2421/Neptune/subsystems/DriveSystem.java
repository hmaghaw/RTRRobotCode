<<<<<<< HEAD
// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2421.Neptune.subsystems;

import org.usfirst.frc2421.Neptune.RobotMap;
import org.usfirst.frc2421.Neptune.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class DriveSystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    CANJaguar cANJaguarLeft = RobotMap.driveSystemCANJaguarLeft;
    CANJaguar cANJaguarRight = RobotMap.driveSystemCANJaguarRight;
//    RobotDrive robotDrive = RobotMap.driveSystemRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new TeleDrive());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

=======
package org.usfirst.frc2421.Neptune.subsystems;

import com.sun.squawk.debugger.Log;
import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.tables.ITable;
import org.usfirst.frc2421.Neptune.RobotMap;
import org.usfirst.frc2421.Neptune.commands.drive.TeleDrive;
import org.usfirst.frc2421.Neptune.utils.RobotUtils;

/**
 * This system is used to set and get the speeds of the drive motors This is a
 * constructor for the 2 CAN Jaguars used in the drive system
 */
public class DriveSystem extends Subsystem {

    public CANJaguar leftDriveMotor = RobotMap.driveSystemCANJaguarLeft;
    public CANJaguar rightDriveMotor = RobotMap.driveSystemCANJaguarRight;
    public boolean enabled = true;
    
    public DriveSystem(){
    enabled &= (leftDriveMotor != null);
    enabled &= (rightDriveMotor != null);
}

    public void initDefaultCommand() {
>>>>>>> origin/temp-master
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

<<<<<<< HEAD
    public void runMotors(double leftSpeed, double rightSpeed) {
        try {
            cANJaguarLeft.setX(leftSpeed);
            cANJaguarRight.setX(rightSpeed);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }

=======
    /**
     * This method sets the speed of the drive motors based on the parameters
     *
     * @param leftSpeed
     * @param rightSpeed
     */
    public void runMotors(double leftSpeed, double rightSpeed) {
        try {
            leftDriveMotor.setX(leftSpeed);
            rightDriveMotor.setX(rightSpeed);
        } catch (CANTimeoutException ex) {
            if (Log.debug()) {
                Log.log(ex.toString());
            }
        }
>>>>>>> origin/temp-master
    }

    public void turnLeft(double speed) {
        runMotors(speed, 0);
    }

    public void turnRight(double speed) {
        runMotors(0, speed);
    }
<<<<<<< HEAD
    
    public double[] getSpeeds(){
        double[] speeds = new double[2];
        try {
            speeds[0] = cANJaguarLeft.getX();
            speeds[1] = cANJaguarRight.getX();
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        } finally {
            return speeds;
        }
    } 
            
=======

    /**
     * This method returns the speeds of the motors in the form of a double
     * array called speeds
     *
     * @return
     */
    public double[] getSpeeds() {
        double[] speeds = {0, 0}; // Initializes a double array of two zeroes
        try {
            speeds[0] = leftDriveMotor.getX();
            speeds[1] = rightDriveMotor.getX();
        } catch (CANTimeoutException ex) {
            if (Log.debug()) {
                Log.log(ex.toString());
            }
        }
        return speeds;

    }

    public void refreshData() {
        RobotUtils.tryPutData("Left Drive Motor", leftDriveMotor);
        RobotUtils.tryPutData("Right Drive Motor", rightDriveMotor);
    }
>>>>>>> origin/temp-master
}
